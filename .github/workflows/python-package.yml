name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip  # Path to the pip cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} # Cache key
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      - name: Set up PostgreSQL
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: '14'

      - name: Add PostgreSQL to PATH
        shell: pwsh
        run: |
          $postgresPath = "C:\Program Files\PostgreSQL\14\bin"
          $env:PATH = "$postgresPath;$env:PATH"
          Write-Host "Updated PATH: $env:PATH"

      - name: Start PostgreSQL
        shell: pwsh
        run: |
          pg_ctl start

      - name: Create Database and User
        shell: pwsh
        env:
          PGUSER: postgres
          PGPASSWORD: postgres
        run: |
          psql -c "CREATE DATABASE test_db;" -U postgres
          psql -c "CREATE USER IF NOT EXISTS app_user WITH PASSWORD '${{ secrets.DB_PASS }}';" -U postgres
          psql -c "GRANT ALL PRIVILEGES ON DATABASE test_db TO app_user;" -U postgres
          psql -c "ALTER DATABASE test_db OWNER TO app_user;" -U postgres
      - name: Run API Caller
        run: |
          cd ${{ github.workspace }}/retail_pg
          python APIcaller.py
        env:
          DB_HOST: localhost
          DB_NAME: test_db
          DB_USER: app_user
          DB_PASS: ${{ secrets.DB_PASS }}


      - name: Run DBT Models
        run: |
          cd ${{ github.workspace }}/retail_pg
          dbt run  # No need to call python here

      - name: Run Train Classifier
        run: |
          cd ${{ github.workspace }}/retail_pg
          python Train_Classifier.py
        env:
          DB_HOST: localhost
          DB_NAME: test_db
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: pytest  # Run from the root of the repository or specify path
